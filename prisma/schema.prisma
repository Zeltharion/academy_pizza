generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id               Int               @id @default(autoincrement())
    fullName         String
    email            String            @unique
    password         String
    role             UserRole          @default(USER)
    verified         DateTime?
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
    provider         String?
    providerId       String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          Int              @id @default(autoincrement())
    name        String
    imageUrl    String
    ingredients Ingredient[]
    variants    ProductVariant[]
    category    Category         @relation(fields: [categoryId], references: [id])
    categoryId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductVariant {
    id        Int        @id @default(autoincrement())
    price     Int
    size      Int?
    pizzaType Int?
    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient {
    id        Int        @id @default(autoincrement())
    name      String
    price     Int
    imageUrl  String
    products  Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id          Int        @id @default(autoincrement())
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    token       String
    totalAmount Int        @default(0)
    items       CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id               Int            @id @default(autoincrement())
    productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId Int
    cart             Cart           @relation(fields: [cartId], references: [id])
    cartId           Int
    ingredients      Ingredient[]
    quantity         Int            @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id          Int         @id @default(autoincrement())
    paymentId   String?
    user        User?       @relation(fields: [userId], references: [id])
    userId      Int?        @unique
    token       String
    totalAmount Int
    status      OrderStatus @default(PENDING)
    items       Json?
    fullName    String
    phone       String
    email       String
    address     String
    comment     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id     Int    @id @default(autoincrement())
    user   User   @relation(fields: [userId], references: [id])
    userId Int    @unique
    code   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
